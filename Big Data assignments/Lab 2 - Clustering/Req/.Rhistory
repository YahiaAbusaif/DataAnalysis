df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
df
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers re the new selected colors
km$centers
for (i in 1:dim(img)[1]*dim(img)[2]) df[i,] = km$centers[km$cluster[i],]
df
dim(df)
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
df
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers re the new selected colors
km$centers
df[1,]
## These centers re the new selected colors
km$centers
for (i in 1:dim(img)[1]*dim(img)[2]) df[i,] = km$centers[km$cluster[i],]
df[1,]
dim(img)[1]*dim(img)[2]
dim(df)
km$centers[km$cluster[1],]
df[i]
df[1,]
for (i in 1:dim(img)[1]*dim(img)[2]) df[i,] = km$centers[km$cluster[i],]
writePNG()
df[1,]
df[2,]
km$centers[km$cluster[2],]
df[1,]
km$centers[km$cluster[2],]$R
km$centers[km$cluster[2],]['R']
for (i in 1:dim(img)[1]*dim(img)[2]){
df[i,]$R = km$centers[km$cluster[i],]['R']
df[i,]$G = km$centers[km$cluster[i],]['G']
df[i,]$B = km$centers[km$cluster[i],]['B']
}
df[1,]
km$centers[km$cluster[i],]
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
df
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers re the new selected colors
km$centers
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
df
set.seed(1234)
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers re the new selected colors
km$centers
df[1,]
km$centers[km$cluster[i],]
km$centers[km$cluster[1],]
for (i in 1:dim(img)[1]*dim(img)[2]){
df[i,]$R = km$centers[km$cluster[i],]['R']
df[i,]$G = km$centers[km$cluster[i],]['G']
df[i,]$B = km$centers[km$cluster[i],]['B']
}
for (i in 1:dim(img)[1]*dim(img)[2]){
df[i,]$R = km$centers[km$cluster[i],]['R']
df[i,]$G = km$centers[km$cluster[i],]['G']
df[i,]$B = km$centers[km$cluster[i],]['B']
}
df[1,]
km$centers[km$cluster[1],]
df[1,]$R
df[1,]$R = 0
df[1,]$R
km$centers[km$cluster[1],]['R']
df[1,]$R = km$centers[km$cluster[1],]['R']
df[1,]$R
for (i in 1:dim(img)[1]*dim(img)[2]){
df[i,]$R = km$centers[km$cluster[i],]['R']
df[i,]$G = km$centers[km$cluster[i],]['G']
df[i,]$B = km$centers[km$cluster[i],]['B']
}
for (i in 1:3){
print(i)
}
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
df
k=16
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
set.seed(1234)
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers re the new selected colors
km$centers
df[1,]
km$centers[km$cluster[1],]
km$centers[6,]
km$cluster[1]
km$centers[6,]
df[1,]
for (i in 1:dim(img)[1]*dim(img)[2]){
df[i,]$R = km$centers[km$cluster[i],]['R']
df[i,]$G = km$centers[km$cluster[i],]['G']
df[i,]$B = km$centers[km$cluster[i],]['B']
}
df[1,]
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
set.seed(1234)
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers re the new selected colors
km$centers
for (i in 1:dim(img)[1]*dim(img)[2]){
df[i,]$R = km$centers[km$cluster[i],]['R']
df[i,]$G = km$centers[km$cluster[i],]['G']
df[i,]$B = km$centers[km$cluster[i],]['B']
}
km$centers[km$cluster[1],]['R']
df[i,]$R
df[1,]$R
df[1,R]
df[1,1]
km$centers[km$cluster[1],][1]
km$centers[km$cluster[1],]
km$centers[km$cluster[1],][1]
km$centers[km$cluster[1],][1][1]
km$centers[km$cluster[1],][1][1]+1
df[i,1] = km$centers[km$cluster[i],]['R']
df[i,2] = km$centers[km$cluster[i],]['G']
df[i,3] = km$centers[km$cluster[i],]['B']
df[1,1]
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
set.seed(1234)
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers re the new selected colors
km$centers
for (i in 1:dim(img)[1]*dim(img)[2]){
df[i,1] = km$centers[km$cluster[i],]['R']
df[i,2] = km$centers[km$cluster[i],]['G']
df[i,3] = km$centers[km$cluster[i],]['B']
}
df[1,1]
km$centers[km$cluster[i],]['R']
km$centers[km$cluster[1],]['R']
df[1,1] = km$centers[km$cluster[1],]['R']
df[1,1]
km$centers[km$cluster[1],]['R']
print(i)
for (i in 1:dim(img)[1]*dim(img)[2]){
print(i)
}
for (i in (1:dim(img)[1]*dim(img)[2]){
for (i in (1:dim(img)[1]*dim(img)[2])){
print(i)
}
dim(img)
dim(img)[2]
dim(img)[2]*dim(img)[1]
for (i in 1:(dim(img)[1]*dim(img)[2])){
print(i)
#df[i,1] = km$centers[km$cluster[i],]['R']
#df[i,2] = km$centers[km$cluster[i],]['G']
#df[i,3] = km$centers[km$cluster[i],]['B']
}
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
set.seed(1234)
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers re the new selected colors
km$centers
for (i in 1:(dim(img)[1]*dim(img)[2])) df[i,] = km$centers[km$cluster[i],]
df[1,]
km$centers[km$cluster[1],]
km$centers[km$cluster[2],]
df[2,]
dim(df) = c(128,128,3)
x <- 1:12 ; dim(x) <- c(3,4)
x
3*128*128
dim(df) = c(128,128)
dim(df) = c(128,128,3)
img
dim(img)
ar <- array(df, c(128, 128, 3));
dim(ar
dim(ar)
dim(ar)
writePNG(ar, 'compressed.png')
type(x)
typeof(x)
typeof(img)
df$R
R = matrix(df$R, c(128,128))
R
dim(R)
`dim<-`(df, c(128,128,3))
dim<-(df, c(128,128,3))
dim.data.frame(df) = c(128,128,3)
dim.data.frame(df) <- c(128,128,3)
df[,1]
df$R
df$R == df[,1]
R1 = matrix(df$R, 128, 128)
G1 = matrix(df$B, 128, 128)
B1 = matrix(df$G, 128, 128)
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
set.seed(1234)
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers are the new selected colors
km$centers
for (i in 1:(dim(img)[1]*dim(img)[2])) df[i,] = km$centers[km$cluster[i],]
R1 = matrix(df$R, 128, 128)
G1 = matrix(df$B, 128, 128)
B1 = matrix(df$G, 128, 128)
img[,,1] = R1
img[,,2] = G1
img[,,3] = B1
writePNG(img, 'compressed.png')
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
set.seed(1234)
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers are the new selected colors
km$centers
# Assign each pixel to the centroid of its cluster.
for (i in 1:(dim(img)[1]*dim(img)[2])) df[i,] = km$centers[km$cluster[i],]
R1 = matrix(df$R, dim(img)[1], dim(img)[2])
G1 = matrix(df$B, dim(img)[1], dim(img)[2])
B1 = matrix(df$G, dim(img)[1], dim(img)[2])
img[,,1] = R1
img[,,2] = G1
img[,,3] = B1
# Compressed size is 1/3  the original size !
writePNG(img, 'compressed.png')
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
set.seed(1234)
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers are the new selected colors
km$centers
# Assign each pixel to the centroid of its cluster.
for (i in 1:(dim(img)[1]*dim(img)[2])) df[i,] = km$centers[km$cluster[i],]
R1 = matrix(df$R, dim(img)[1], dim(img)[2])
G1 = matrix(df$B, dim(img)[1], dim(img)[2])
B1 = matrix(df$G, dim(img)[1], dim(img)[2])
img[,,1] = R1
img[,,2] = G1
img[,,3] = B1
# Compressed size is 1/3 of the original size !
writePNG(img, 'compressed.png')
df.data
da = array(c(df$R, df$G, df$B), c(128,128,3))
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
set.seed(1234)
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers are the new selected colors
km$centers
# Assign each pixel to the centroid of its cluster.
for (i in 1:(dim(img)[1]*dim(img)[2])) df[i,] = km$centers[km$cluster[i],]
compressed = array(c(df$R, df$G, df$B), c(128,128,3))
# Compressed size is 1/3 of the original size !
writePNG(img, 'compressed.png')
# Compressed size is 1/3 of the original size !
writePNG(compressed, 'compressed.png')
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
set.seed(1234)
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers are the new selected colors
km$centers
# Assign each pixel to the centroid of its cluster.
for (i in 1:(dim(img)[1]*dim(img)[2])) df[i,] = km$centers[km$cluster[i],]
compressed = array(c(df$R, df$G, df$B), c(128,128,3))
# Compressed size is 1/3 of the original size !
writePNG(compressed, 'compressed.png')
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
# Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
set.seed(1234)
k=16
iter=15
km = kmeans(df, centers=k, iter.max=iter)
km
km$cluster
## These centers are the new selected colors
km$centers
# Assign each pixel to the centroid of its cluster.
for (i in 1:(dim(img)[1]*dim(img)[2])) df[i,] = km$centers[km$cluster[i],]
compressed = array(c(df$R, df$G, df$B), c(dim(img)[1],dim(img)[2],3))
# Compressed size is 1/3 of the original size ! about 11KB
writePNG(compressed, 'compressed.png')
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
# x, y data points
# dim = (300, 2)
#(2)
df = read.csv("clustering_data.csv")
x = df[,1]
y = df[,2]
plot(x, y, main='Data points', type='p', xlab='x', ylab='y')
set.seed(1234)
# Apply kmeans with 10 centers (k) with max_iter=15
k=10
iter=15
#(3)
km = kmeans(df, centers=k, iter.max=iter)
km
#(4)
km$cluster
# Centroids
km$centers
str(km)
#(5)
plot(df, col=km$cluster, main='Clusters', type='p', xlab='x', ylab='y')
#(6)
# pch=17 for the solid Triangle
points(km$center, col=1:k, pch=17, cex=2)
###(8)Method: 1
dist = 0
for (i in 1:10) dist[i] = kmeans(df, centers=i, iter.max=iter)$tot.withinss
plot(1:10, dist, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
rm(list=ls())
setwd("F:\\CMP 2020\\Big Data\\Labs\\Lab 2 - Clustering\\Lab 2\\Req")
library(png)
#(2)
img = readPNG("bird_small.png")
#RGB
R = img[,,1]
G = img[,,2]
B = img[,,3]
#(3) Convert matrix to vector
df = data.frame(c(R), c(G), c(B))
colnames(df) = c('R', 'G', 'B')
df
